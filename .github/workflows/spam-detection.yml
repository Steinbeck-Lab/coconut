name: Spam Issue Detection

on:
  issues:
    types: [opened]

jobs:
  spam-detection:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @octokit/rest natural

      - name: Check if issue is spam
        id: spam-check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require('@octokit/rest');
            const natural = require('natural');
            
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            
            // Get issue data
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueTitle = issue.title;
            const issueBody = issue.body || '';
            const issueAuthor = issue.user.login;
            
            // Log issue information for debugging
            console.log(`Analyzing issue #${issueNumber} from ${issueAuthor}`);
            console.log(`Title: ${issueTitle}`);
            
            // Helper function to determine if issue is likely spam
            function isSpam(title, body) {
              // Convert to lowercase for consistent matching
              const lowerTitle = title.toLowerCase();
              const lowerBody = body.toLowerCase();
              const fullContent = `${lowerTitle} ${lowerBody}`;
              
              // Common spam indicators - general terms found across many spam types
              const spamKeywords = [
                // Medical/pharmaceutical spam
                'viagra', 'cialis', 'pharmacy', 'prescription', 'medication',
                // Gambling/lottery
                'casino', 'lottery', 'jackpot', 'betting', 'gambling', 'winners',
                // Financial scams
                'bitcoin', 'crypto', 'investment opportunity', 'earn money', 'make money',
                'forex', 'trading', 'passive income', 'quick cash', 'financial freedom',
                // Work opportunities 
                'work from home', 'remote job', 'side hustle', 'residual income',
                // Loans/finance
                'loan offer', 'quick loan', 'debt relief', 'credit score', 'refinance',
                // Dating/adult
                'dating site', 'hot singles', 'meet singles', 'adult content',
                // Health products
                'weight loss', 'diet', 'fat burn', 'miracle cure', 'natural remedy',
                // Marketing/SEO
                'seo services', 'boost ranking', 'website traffic', 'backlinks',
                // Domain sales
                'domain for sale', 'premium domain', 'web address',
                // Email list/contact sales (general patterns)
                'email list', 'contact database', 'leads', 'mailing list',
                // Marketing language
                'limited time', 'exclusive offer', 'act now', 'don\'t miss', 
                'unsubscribe', 'one-time offer', 'best price', 'discount'
              ];
              
              // Phishing-specific keywords and phrases
              const phishingKeywords = [
                'verify your account', 'account verification', 'update your information',
                'confirm your details', 'unusual activity', 'suspicious activity',
                'security alert', 'password expired', 'account suspended', 'account on hold',
                'payment failed', 'billing problem', 'invoice attached', 'document shared',
                'dropbox link', 'google doc', 'login attempt', 'please login',
                'confirm identity', 'reset password', 'unusual login', 'access limited'
              ];
              
              // Check for common spam patterns
              const hasSpamKeywords = spamKeywords.some(keyword => 
                fullContent.includes(keyword)
              );
              
              // Check for phishing indicators
              const hasPhishingKeywords = phishingKeywords.some(keyword => 
                fullContent.includes(keyword)
              );
              
              // Extract all URLs for further analysis
              const urlRegex = /(https?:\/\/[^\s]+)/g;
              const urlMatches = fullContent.match(urlRegex) || [];
              const hasExcessiveUrls = urlMatches.length > 5;
              
              // Check for suspicious URL patterns (common in phishing)
              const suspiciousUrlPatterns = [
                // Lookalike domains with typos
                /paypa[l1]/i, /amaz[o0]n/i, /g[o0]{2}gle/i, /faceb[o0]{2}k/i, /[l1]inked[i1]n/i,
                // URLs with unusual TLDs for business sites
                /\.(xyz|top|club|online|site|fun|space|icu)\//i,
                // IP address URLs
                /https?:\/\/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/,
                // URLs with encoded characters to hide destination
                /%[0-9A-F]{2}/i
              ];
              
              const hasSuspiciousUrls = urlMatches.some(url => {
                return suspiciousUrlPatterns.some(pattern => pattern.test(url));
              });
              
              // Check for domain mimicry - common financial/tech services with small variations
              const knownDomains = ['paypal', 'amazon', 'apple', 'microsoft', 'google', 'facebook', 
                                    'instagram', 'twitter', 'linkedin', 'github', 'dropbox', 'chase',
                                    'wellsfargo', 'bankofamerica', 'capitalone', 'amex', 'gmail'];
              
              const hasMimicryDomains = urlMatches.some(url => {
                const domain = url.toLowerCase();
                return knownDomains.some(known => {
                  // Check for domains that contain the name but aren't the official domain
                  // e.g. "paypal-secure.com", "secure-paypal.net"
                  return domain.includes(known) && 
                         !domain.includes(`${known}.com`) && 
                         !domain.includes(`www.${known}.com`);
                });
              });
              
              // Check for common email marketing patterns
              const hasMarketingPatterns = 
                fullContent.includes('unsubscribe') || 
                fullContent.includes('view in browser') ||
                fullContent.includes('view as webpage') ||
                fullContent.includes('click here to unsubscribe');
              
              // Business scam detection - general patterns for vague business outreach
              const businessScamIndicators = [
                // General business outreach with vague titles
                /director|manager|CEO|head of|officer|specialist/i.test(fullContent) && 
                !/(specific|particular|regarding your|about your|existing)/i.test(fullContent),
                
                // Vague partnership/supplier requests
                /(looking|searching|seeking)\s*(for|to find)\s*(partner|supplier|vendor|distributor)/i.test(fullContent) && 
                !/(specific product|specific service|specific project)/i.test(fullContent),
                
                // Vague interest in products without specifics
                /(interest|interested in)\s*(your|in your)\s*(product|service|business|company)/i.test(fullContent) && 
                !/(specific|particular|model|item)/i.test(fullContent),
                
                // Mentions of payment terms or bank transfers in initial outreach
                /(payment term|bank transfer|wire transfer|advance payment)/i.test(fullContent) && 
                /(day|week|month|percent|%)/i.test(fullContent),
                
                // Requesting catalog without specific interest
                /(catalog|catalogue|price list|quotation|quote)/i.test(fullContent) && 
                !/(specific|particular|item|model)/i.test(fullContent),
                
                // Generic distribution network claims
                /(distribution|market|customer|client)\s*(network|base|reach|access)/i.test(fullContent),
                
                // Formulaic introduction with generic company reference
                /I am \w+\s+\w+\s+(from|of|at)\s+[A-Z]/i.test(fullContent) && 
                /(company|corporation|enterprise|business|firm)/i.test(fullContent) &&
                !/(about your|regarding your|your recent|your product)/i.test(fullContent)
              ];
              
              const isLikelyBusinessScam = businessScamIndicators.filter(Boolean).length >= 2;
              
              // Marketing follow-up spam detection - general patterns
              const isMarketingFollowUp = (
                // Follow-up language
                /(follow|following)\s*(up|with you)/i.test(fullContent) &&
                
                // Generic marketing engagement patterns
                (
                  // Fake previous contact
                  /(haven't heard|no response|not heard back|didn't receive|since our last|since my last)/i.test(fullContent) ||
                  
                  // Pushing for response
                  /(checking in|touching base|reaching out|wanted to see)/i.test(fullContent)
                ) && 
                
                // Marketing offering indicators
                (
                  /(quote|proposal|offer|service|package|solution|deal|discount|promotion)/i.test(fullContent) ||
                  /(SEO|marketing|design|development|optimization|analysis|consultation|strategy)/i.test(fullContent) ||
                  /^(Hello|Hi|Greetings|Good day|Dear)/i.test(fullContent)
                )
              );
              
              // Data selling spam detection - more general patterns to catch various approaches
              const isDataSellingSpam = (
                // Pattern 1: Mentions of contact lists with availability/offering language
                (/(email|contact|attendee|lead|prospect|customer|client)\s*(list|database|data|information)/i.test(fullContent) &&
                 /(available|acquire|purchase|buy|sell|offer|get|access|download)/i.test(fullContent)) ||
                
                // Pattern 2: Mentions of contact numbers (any 4+ digit number followed by contact-related term)
                /\d{4,}\s*(contact|email|lead|record|profile|attendee|prospect)/i.test(fullContent) ||
                
                // Pattern 3: Industry or event-related data selling
                (/(conference|expo|exhibition|event|industry|trade show|fair)/i.test(fullContent) &&
                 /(list|database|contact|attendee|participant|visitor)/i.test(fullContent) &&
                 /(available|interested|pricing|information|detail)/i.test(fullContent)) ||
                
                // Pattern 4: Direct marketing of contact data
                /(marketing|business|contact|email)\s*(list|database|directory)/i.test(fullContent) ||
                
                // Pattern 5: Data selling with engagement request
                (/(contact|email|data|list)/i.test(fullContent) &&
                 /(interested|let me know|get back|reply|respond)/i.test(fullContent) &&
                 /(price|cost|detail|information|more)/i.test(fullContent))
              );
              
              // Email specific checks for support emails that are NOT spam
              const isLikelyRelevantEmail = (
                (lowerBody.includes('support') || lowerBody.includes('help') || lowerBody.includes('issue')) &&
                (lowerBody.includes('error') || lowerBody.includes('problem') || lowerBody.includes('question') || lowerBody.includes('how to'))
              );
              
              // Check if the structure looks like a legitimate support request
              const hasQuestionOrRequest = 
                lowerBody.includes('?') || 
                lowerBody.includes('please') || 
                lowerBody.includes('thank you') ||
                lowerBody.includes('help');
              
              // Naive Bayes classifier could be extended here for more advanced detection
              
              // Check for requests for sensitive information (common in phishing)
              const requestsSensitiveInfo = (
                fullContent.includes('credit card') ||
                fullContent.includes('social security') ||
                fullContent.includes('ssn') ||
                fullContent.includes('password') ||
                fullContent.includes('login credentials') ||
                fullContent.includes('bank details') ||
                fullContent.includes('personal information') ||
                fullContent.includes('verify your identity') ||
                fullContent.includes('login to view') ||
                /please\s+(?:enter|provide|confirm|update|verify)\s+your/i.test(fullContent)
              );
              
              // Check for urgent language (common in phishing)
              const hasUrgentLanguage = (
                fullContent.includes('urgent') ||
                fullContent.includes('immediate action') ||
                fullContent.includes('immediate attention') ||
                fullContent.includes('act now') ||
                fullContent.includes('expires soon') ||
                fullContent.includes('within 24 hours') ||
                fullContent.includes('account will be locked') ||
                fullContent.includes('security breach') ||
                /within\s+\d+\s+(?:hour|day|minute)/i.test(fullContent)
              );
              
              // Decision logic - identify spam
              const isLikelySpam = (
                hasSpamKeywords || 
                hasExcessiveUrls || 
                hasMarketingPatterns ||
                isLikelyBusinessScam ||
                isMarketingFollowUp ||
                isDataSellingSpam
              );
              
              // Decision logic - identify phishing
              const isLikelyPhishing = (
                hasPhishingKeywords ||
                hasSuspiciousUrls ||
                hasMimicryDomains ||
                requestsSensitiveInfo ||
                (hasUrgentLanguage && (urlMatches.length > 0 || requestsSensitiveInfo))
              );
              
              const isLikelyLegitimate = (
                isLikelyRelevantEmail || 
                hasQuestionOrRequest
              );
              
              // If we have strong indicators of legitimacy, override spam detection
              // But don't override phishing detection, as phishing often mimics legitimate emails
              if (isLikelyLegitimate && !hasSpamKeywords && !isLikelyPhishing) {
                return false;
              }
              
              return isLikelySpam || isLikelyPhishing;
            }
            
            // Determine if the issue is spam
            const spamDetected = isSpam(issueTitle, issueBody);
            console.log(`Spam detected: ${spamDetected}`);
            
            // If spam is detected, close the issue with a comment
            if (spamDetected) {
              console.log(`Closing issue #${issueNumber} as spam`);
              
              // Determine message based on spam classification
              let closeReason = 'potential spam';
              
              if (isLikelyPhishing) {
                closeReason = 'potential phishing content';
              } else if (isLikelyBusinessScam) {
                closeReason = 'potential business scam';
              } else if (isDataSellingSpam) {
                closeReason = 'unsolicited data selling';
              } else if (isMarketingFollowUp) {
                closeReason = 'unsolicited marketing';
              }
              
              // Add comment explaining why the issue was closed
              await octokit.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `This issue has been automatically closed because it was detected as ${closeReason}. If this is a mistake, please contact the repository maintainers.`
              });
              
              // Close the issue
              await octokit.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              // Determine the specific type of spam for better labeling
              let label = 'spam';
              
              if (isLikelyPhishing) {
                label = 'phishing';
              } else if (isLikelyBusinessScam) {
                label = 'business-scam';
              } else if (isDataSellingSpam) {
                label = 'data-selling';
              } else if (isMarketingFollowUp) {
                label = 'marketing-spam';
              }
              
              // Add appropriate label
              await octokit.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: [label]
              });
              
              return true;
            }
            
            return false;
